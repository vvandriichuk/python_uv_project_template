[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "my_package"
version = "0.1.0"
description = "Test project with using uv"
authors = [
    {name = "Viktor Andriichuk", email = "v.andriichuk@gmail.com"},
]
readme = "README.md"
requires-python = ">=3.13"
dependencies = [
    "pydantic>=2.11.3",
    "pydantic-settings>=2.9.1",
    "requests>=2.32.3",
]

[project.optional-dependencies]
dev = [
    "pytest>=8.3.5",
    "pre-commit>=4.1.0",
    "mypy>=1.15.0",
    "ruff>=0.11.0",
    "types-requests",
    "pyright>=1.1.398",
]

[tool.ruff]
fix = true
line-length = 120
target-version = "py313"

[tool.ruff.lint]
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"
select = ["ALL"]
ignore = [
    "A003",
    "ANN101",
    "ANN102",
    "ANN204",
    "ANN401",
    "D",
    "EM101",
    "ERA001",
    "FBT",
    "FIX",
    "FIX002",
    "N999",
    "PLR2004",
    "TRY003",
    "TD001",
    "TD002",
    "TD003",
    "EM102",
    "BLE001",
    "TRY400",
    "TRY002",
    "G004",
    "S311",
    "E402",
    "S101",
    "T201", # for now, llm engine will be with prints, we will replace them with logs later
    "S102", # we use exec, we made it safe as possible
    "PGH003", # it fixes <Use specific rule codes when ignoring type issues>
    "SIM118", # it fixes <Use `key in dict` instead of `key in dict.keys()`>
    "RET505", # it fixes <Unnecessary `elif` after `return` statement>
    "S307", # it fixes <Use of possibly insecure function; consider using `ast.literal_eval`>
    "E731", # it fixes <Do not assign a lambda expression to a variable>
    "A002", # langchain uses "input" as parameter name, so why we couldn't?
    "FA102", # it fixes <Use `from __future__ import annotations`>
    "COM812", # Avoid conflicts with the formatter
]
fixable = ["ALL"]
unfixable = []
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "database/versions",
    "venv",
    ".session",
    "logs",
    ".lock",
    ".toml",
    "tests/*.py",
]

[tool.ruff.lint.mccabe]
max-complexity = 20

[tool.ruff.lint.flake8-bugbear]
extend-immutable-calls = ["fastapi.Depends", "fastapi.Query", "fastapi.Form"]

[tool.ruff.lint.flake8-annotations]
suppress-dummy-args = true

[tool.ruff.lint.pep8-naming]
classmethod-decorators = ["pydantic.validator", "pydantic.root_validator", "pydantic.validate_arguments"]

[tool.mypy]
python_version = "3.13"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
strict_optional = true
exclude = ['tests']

[tool.pyright]
include = ["src"]
exclude = ["**/__pycache__", ".venv"]
reportMissingImports = true
pythonVersion = "3.13"
reportUnusedImport = true
reportUnusedClass = true
reportUnusedFunction = true
reportUnusedVariable = true
reportDuplicateImport = true
reportOptionalMemberAccess = false
reportPrivateImportUsage = false
reportUnnecessaryIsInstance = false
